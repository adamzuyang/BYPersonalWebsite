{
    "projects": [
        {
            "name":"UrsaTech Study",
            "slug":"ursatech-study",
            "image":"/images/projects/ursatech_study.png",
            "description":"<p>As part of a project with UC Berkeley UrsaTech, a club on campus that offers pro-bono tech consulting services to university-affiliated organizations, I launched a study investigating the socioeconomic factors influencing student development and the racial achievement gap due to the economic effects and racial disparities of the COVID-19 pandemic. The work was done in Python using data analysis libraries such as Pandas, Numpy, Matplotlib, Sklearn, Seaborn, Tensorflow, and Keras. Datasets from the National Center for Educational Statistics High School Longitudinal Study and Bureau of Labor Statistics Current Population Survey were cleaned, analyzed, visualized, and modeled. The findings were then compiled into a formal research report and published on <i><a href='https://towardsdatascience.com/' target='_blank'>Towards Data Science</a></i>, where it was featured in the Editors' Picks and Data for Change columns. The full Github repository will all source code and relevant documentation can be found <a href='https://github.com/adamzuyang/Ursatech-Adam' target='_blank'>here</a>.</p>",
            "link":"https://towardsdatascience.com/the-impacts-of-covid-19-on-the-achievement-gap-ca5afa389141",
            "client_name":"",
            "client_company":"",
            "client_feedback":"",
            "schema":"project",
            "dateString":"Sunday, December 27, 2020",
            "timestamp":{},
            "_id":"BkiYIyXkTSMvCthd",
            "category":"Data Analysis",
            "opts":null,
            "preview":"",
            "client":"",
            "dateRange":"2020"
        },
        
        {
            "name":"Pathfinder",
            "slug":"pathfinder",
            "image":"/images/projects/pathfinder.png",
            "description":"<p>After taking a course in data structures and algorithms at UC Berkeley, I sought to apply what I had learned by creating an online pathfinding visualizer. The visualizer features Dijkstra's, A*, Greedy, BFS, DFS, and bidirectional algorithms and makes use of heuristics to generate different search patterns. The visualizer is interactive, allowing the user to add walls, weighted nodes, and utilize a recursive random maze generator. This project was created in conjunction with my personal portfolio and uses Node.js, Bootstrap, and Javascript. Animations were created with CSS. The full Github repository can be found <a href='https://github.com/adamzuyang/BYPersonalWebsite' target='_blank'>here</a>.</p>",
            "link":"https://barnettyang.herokuapp.com/pathfinder",
            "client_name":"",
            "client_company":"",
            "client_feedback":"",
            "schema":"project",
            "dateString":"Sunday, December 27, 2020",
            "timestamp":{},
            "_id":"CmUuvYwgjNGLWOfB",
            "category":"Software Engineering and Algorithms",
            "opts":null,
            "preview":"",
            "client":"",
            "dateRange":"2020"
        },

        {
            "name":"Sorting Visualizer",
            "slug":"sorter",
            "image":"/images/projects/sorter.png",
            "description":"<p>In addition to a pathfinding visualizer, I also created a sorting visualizer after taking CS 61B at UC Berkeley. The visualizer currently features six comparison-based algorithms (Selection Sort, Bubble Sort, Heap Sort, Merge Sort, Insertion Sort, and Quick Sort) and two radix sorts (LSD Radix Sort and MSD Radix Sort). This project was created in conjunction with my personal portfolio and uses Node.js, Bootstrap, and Javascript. The full Github repository can be found <a href='https://github.com/adamzuyang/BYPersonalWebsite' target='_blank'>here</a>.</p>",
            "link":"https://barnettyang.herokuapp.com/sorter",
            "client_name":"",
            "client_company":"",
            "client_feedback":"",
            "schema":"project",
            "dateString":"Sunday, December 27, 2020",
            "timestamp":{},
            "_id":"CmUuvYwgjNGLWOfB",
            "category":"Software Engineering and Algorithms",
            "opts":null,
            "preview":"",
            "client":"",
            "dateRange":"2021"
        },
        
        {
            "name":"Sketchy",
            "slug":"sketchy",
            "image":"/images/projects/sketchy.png",
            "description":"<p>Sketchy is a web drawing game conceived by a project team at the UC Berkeley IEEE Student Branch. The game was inspired by the success of Skribbl.io and Among Us. As a full-stack developer, I created the design document, configured debugging directory settings, developed overall Javascript functionalities and websockets with Node.js, integrated and engineered backend systems, and developed the chat and drawing board. The full Github repository and source code can be found <a href='https://github.com/IEEEBerkeley/sketchy' target='_blank'>here</a>.</p>",
            "link":"https://github.com/IEEEBerkeley/sketchy",
            "client_name":"",
            "client_company":"",
            "client_feedback":"",
            "schema":"project",
            "dateString":"Sunday, December 27, 2020",
            "timestamp":{},
            "_id":"DxxWWohTWAUSjXSO",
            "category":"Full-Stack Development",
            "opts":null,
            "preview":"",
            "client":"",
            "dateRange":"2020"
        },
        
        {
            "name":"Bearmaps",
            "slug":"bearmaps",
            "image":"/images/projects/bearmaps.png",
            "description":"<p>Bearmaps is a web mapping application I developed while taking CS 61B at UC Berkeley. It makes use of several data structures and algorithms to create a comprehensive and interactive map of the Berkeley area that is capable of giving detailed routing instructions and plotting directions on a map. Data structures such as tries are used to autocomplete search queries, algorithms such as A* are used for direction routing, and rastering is used to generate the map interface. (Note, when using this app, make sure to constrain map dimensions to solve issues with zooming out.)</p>",
            "link":"http://bybearmaps.herokuapp.com/map.html",
            "client_name":"",
            "client_company":"",
            "client_feedback":"",
            "schema":"project",
            "dateString":"Sunday, December 27, 2020",
            "timestamp":{},
            "_id":"EJviSPwvrlLSUCnl",
            "category":"Data Structures and Algorithms",
            "opts":null,
            "preview":"",
            "client":"",
            "dateRange":"2020"
        },
        
        {
            "name":"Scheme",
            "slug":"scheme",
            "image":"/images/projects/scheme.png",
            "description":"<p>As part of my coursework for CS 61A, I created a Scheme interpreter developed using Python. Scheme is a minimalist dialect of Lisp first created at the MIT AI Lab in the 1970s. The interpreter is capable of executing overall Scheme functionalities such as lambda functions, function declarations, logic statements, and conditional statements, and can also execute Scheme macros and tail recursion. Due to course policy, the Github repository containing the source code for this project has been made private.</p>",
            "link":"https://github.com/adamzuyang/scheme",
            "client_name":"",
            "client_company":"",
            "client_feedback":"",
            "schema":"project",
            "dateString":"Sunday, December 27, 2020",
            "timestamp":{},
            "_id":"FidNgyvKKqfKejfA",
            "category":"Interpreters",
            "opts":null,
            "preview":"",
            "client":"",
            "dateRange":"2020"
        }
    ]
}