<!DOCTYPE html>
<html>
<head>
<title>Lecture28.md</title>
<meta http-equiv="Content-type" content="text/html;charset=UTF-8">

<style>
/* https://github.com/microsoft/vscode/blob/master/extensions/markdown-language-features/media/markdown.css */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

body {
	font-family: var(--vscode-markdown-font-family, -apple-system, BlinkMacSystemFont, "Segoe WPC", "Segoe UI", "Ubuntu", "Droid Sans", sans-serif);
	font-size: var(--vscode-markdown-font-size, 14px);
	padding: 0 26px;
	line-height: var(--vscode-markdown-line-height, 22px);
	word-wrap: break-word;
}

#code-csp-warning {
	position: fixed;
	top: 0;
	right: 0;
	color: white;
	margin: 16px;
	text-align: center;
	font-size: 12px;
	font-family: sans-serif;
	background-color:#444444;
	cursor: pointer;
	padding: 6px;
	box-shadow: 1px 1px 1px rgba(0,0,0,.25);
}

#code-csp-warning:hover {
	text-decoration: none;
	background-color:#007acc;
	box-shadow: 2px 2px 2px rgba(0,0,0,.25);
}

body.scrollBeyondLastLine {
	margin-bottom: calc(100vh - 22px);
}

body.showEditorSelection .code-line {
	position: relative;
}

body.showEditorSelection .code-active-line:before,
body.showEditorSelection .code-line:hover:before {
	content: "";
	display: block;
	position: absolute;
	top: 0;
	left: -12px;
	height: 100%;
}

body.showEditorSelection li.code-active-line:before,
body.showEditorSelection li.code-line:hover:before {
	left: -30px;
}

.vscode-light.showEditorSelection .code-active-line:before {
	border-left: 3px solid rgba(0, 0, 0, 0.15);
}

.vscode-light.showEditorSelection .code-line:hover:before {
	border-left: 3px solid rgba(0, 0, 0, 0.40);
}

.vscode-light.showEditorSelection .code-line .code-line:hover:before {
	border-left: none;
}

.vscode-dark.showEditorSelection .code-active-line:before {
	border-left: 3px solid rgba(255, 255, 255, 0.4);
}

.vscode-dark.showEditorSelection .code-line:hover:before {
	border-left: 3px solid rgba(255, 255, 255, 0.60);
}

.vscode-dark.showEditorSelection .code-line .code-line:hover:before {
	border-left: none;
}

.vscode-high-contrast.showEditorSelection .code-active-line:before {
	border-left: 3px solid rgba(255, 160, 0, 0.7);
}

.vscode-high-contrast.showEditorSelection .code-line:hover:before {
	border-left: 3px solid rgba(255, 160, 0, 1);
}

.vscode-high-contrast.showEditorSelection .code-line .code-line:hover:before {
	border-left: none;
}

img {
	max-width: 100%;
	max-height: 100%;
}

a {
	text-decoration: none;
}

a:hover {
	text-decoration: underline;
}

a:focus,
input:focus,
select:focus,
textarea:focus {
	outline: 1px solid -webkit-focus-ring-color;
	outline-offset: -1px;
}

hr {
	border: 0;
	height: 2px;
	border-bottom: 2px solid;
}

h1 {
	padding-bottom: 0.3em;
	line-height: 1.2;
	border-bottom-width: 1px;
	border-bottom-style: solid;
}

h1, h2, h3 {
	font-weight: normal;
}

table {
	border-collapse: collapse;
}

table > thead > tr > th {
	text-align: left;
	border-bottom: 1px solid;
}

table > thead > tr > th,
table > thead > tr > td,
table > tbody > tr > th,
table > tbody > tr > td {
	padding: 5px 10px;
}

table > tbody > tr + tr > td {
	border-top: 1px solid;
}

blockquote {
	margin: 0 7px 0 5px;
	padding: 0 16px 0 10px;
	border-left-width: 5px;
	border-left-style: solid;
}

code {
	font-family: Menlo, Monaco, Consolas, "Droid Sans Mono", "Courier New", monospace, "Droid Sans Fallback";
	font-size: 1em;
	line-height: 1.357em;
}

body.wordWrap pre {
	white-space: pre-wrap;
}

pre:not(.hljs),
pre.hljs code > div {
	padding: 16px;
	border-radius: 3px;
	overflow: auto;
}

pre code {
	color: var(--vscode-editor-foreground);
	tab-size: 4;
}

/** Theming */

.vscode-light pre {
	background-color: rgba(220, 220, 220, 0.4);
}

.vscode-dark pre {
	background-color: rgba(10, 10, 10, 0.4);
}

.vscode-high-contrast pre {
	background-color: rgb(0, 0, 0);
}

.vscode-high-contrast h1 {
	border-color: rgb(0, 0, 0);
}

.vscode-light table > thead > tr > th {
	border-color: rgba(0, 0, 0, 0.69);
}

.vscode-dark table > thead > tr > th {
	border-color: rgba(255, 255, 255, 0.69);
}

.vscode-light h1,
.vscode-light hr,
.vscode-light table > tbody > tr + tr > td {
	border-color: rgba(0, 0, 0, 0.18);
}

.vscode-dark h1,
.vscode-dark hr,
.vscode-dark table > tbody > tr + tr > td {
	border-color: rgba(255, 255, 255, 0.18);
}

</style>

<style>
/* Tomorrow Theme */
/* http://jmblog.github.com/color-themes-for-google-code-highlightjs */
/* Original theme - https://github.com/chriskempson/tomorrow-theme */

/* Tomorrow Comment */
.hljs-comment,
.hljs-quote {
	color: #8e908c;
}

/* Tomorrow Red */
.hljs-variable,
.hljs-template-variable,
.hljs-tag,
.hljs-name,
.hljs-selector-id,
.hljs-selector-class,
.hljs-regexp,
.hljs-deletion {
	color: #c82829;
}

/* Tomorrow Orange */
.hljs-number,
.hljs-built_in,
.hljs-builtin-name,
.hljs-literal,
.hljs-type,
.hljs-params,
.hljs-meta,
.hljs-link {
	color: #f5871f;
}

/* Tomorrow Yellow */
.hljs-attribute {
	color: #eab700;
}

/* Tomorrow Green */
.hljs-string,
.hljs-symbol,
.hljs-bullet,
.hljs-addition {
	color: #718c00;
}

/* Tomorrow Blue */
.hljs-title,
.hljs-section {
	color: #4271ae;
}

/* Tomorrow Purple */
.hljs-keyword,
.hljs-selector-tag {
	color: #8959a8;
}

.hljs {
	display: block;
	overflow-x: auto;
	color: #4d4d4c;
	padding: 0.5em;
}

.hljs-emphasis {
	font-style: italic;
}

.hljs-strong {
	font-weight: bold;
}
</style>

<style>
/*
 * Markdown PDF CSS
 */

 body {
	font-family: -apple-system, BlinkMacSystemFont, "Segoe WPC", "Segoe UI", "Ubuntu", "Droid Sans", sans-serif, "Meiryo";
	padding: 0 12px;
}

pre {
	background-color: #f8f8f8;
	border: 1px solid #cccccc;
	border-radius: 3px;
	overflow-x: auto;
	white-space: pre-wrap;
	overflow-wrap: break-word;
}

pre:not(.hljs) {
	padding: 23px;
	line-height: 19px;
}

blockquote {
	background: rgba(127, 127, 127, 0.1);
	border-color: rgba(0, 122, 204, 0.5);
}

.emoji {
	height: 1.4em;
}

code {
	font-size: 14px;
	line-height: 19px;
}

/* for inline code */
:not(pre):not(.hljs) > code {
	color: #C9AE75; /* Change the old color so it seems less like an error */
	font-size: inherit;
}

/* Page Break : use <div class="page"/> to insert page break
-------------------------------------------------------- */
.page {
	page-break-after: always;
}

</style>

<script src="https://unpkg.com/mermaid/dist/mermaid.min.js"></script>
</head>
<body>
  <script>
    mermaid.initialize({
      startOnLoad: true,
      theme: document.body.classList.contains('vscode-dark') || document.body.classList.contains('vscode-high-contrast')
          ? 'dark'
          : 'default'
    });
  </script>
<h1 id="lecture-28-reductions-and-decomposition">Lecture 28: Reductions and Decomposition</h1>
<h4 id="10312020">10/31/2020</h4>
<h2 id="topological-sorting">Topological Sorting</h2>
<h3 id="topological-sort">Topological Sort</h3>
<ul>
<li>Suppose we have tasks 0 through 7, where an arrow from v to w indicates that va must happen before w
<ul>
<li>What algorithm do we use to find a valid ordering for these tasks?</li>
</ul>
</li>
</ul>
<h3 id="solution">Solution</h3>
<ul>
<li>Perform a DFS traversal from every vertex with indegree 0, NOT clearing markings in between traversals
<ul>
<li>Record DFS postorder in a list</li>
<li>Topological ordering is given by the reverse of that list</li>
<li>This algorithm fails if there is a cycle (There is no such thing as a topological sort with cycles)</li>
</ul>
</li>
<li>Another better topological sorting algorithm:
<ul>
<li>Run DFS from an arbitrary vertex</li>
<li>If not all marked, pick an unmarked vertex and do it again</li>
</ul>
</li>
</ul>
<h3 id="topological-sort">Topological Sort</h3>
<ul>
<li>The reason it's called a topological sort: Can think of this process as sorting our nodes so they appear in an order consistent with edges
<ul>
<li>When nodes are sorted in diagram, arrows all point rightwards</li>
</ul>
</li>
</ul>
<h3 id="depth-first-search">Depth First Search</h3>
<ul>
<li>Be aware, that when people say &quot;Depth First Search&quot;, they sometimes mean with restarts, and they sometimes mean without</li>
<li>For example, DepthFirstPaths did not restart but Topological Sort restarts from every vertex with indegree 0</li>
</ul>
<h3 id="directed-acyclic-graphs">Directed Acyclic Graphs</h3>
<ul>
<li>A topological sort only exists if the graph is a directed acyclic graph (DAG)</li>
</ul>
<h2 id="shortest-paths-on-dags">Shortest Paths on DAGs</h2>
<ul>
<li>Dijkstra's can fail with negative edges</li>
</ul>
<h3 id="challenge">Challenge</h3>
<ul>
<li>Try to come up with an algorithm for shortest paths on a DAG that works even if there are negative edges</li>
<li>One simple idea: Visit vertices in topological order
<ul>
<li>On each visit, relax all outgoing edges</li>
<li>Each vertex is visited only when all possible info about it has been used!</li>
</ul>
</li>
</ul>
<h3 id="the-dag-spt-algorithm-relax-in-topological-order">The DAG SPT Algorithm: Relax in Topological Order</h3>
<ul>
<li>We have to visit all the vertices in topological order, relaxing all edges as we go
<ul>
<li>Runtime is O(V + E)</li>
</ul>
</li>
</ul>
<h2 id="longest-paths">Longest Paths</h2>
<h3 id="the-longest-paths-problem">The Longest Paths Problem</h3>
<ul>
<li>Consider the problem of finding the longest path tree (LPT) from s to every other vertex. The path must be simple (no cycles!)</li>
<li>Some surprising facts
<ul>
<li>The best known algorithm is exponential (extremely bad)</li>
<li>Perhaps the most important unsolved problem in mathematics</li>
</ul>
</li>
</ul>
<h3 id="the-longest-paths-problem-on-dags">The Longest Paths Problem on DAGs</h3>
<ul>
<li>Difficult challenge
<ul>
<li>Solve the LPT problem on a directed acyclic graph</li>
<li>Algorithm must be O(E + V) runtime</li>
</ul>
</li>
<li>DAG LPT solution for solution G:
<ul>
<li>Form a new copy of the graph G' with signs of all edge weights flipped</li>
<li>Run DAGSPT on G' yielding result X</li>
<li>Flip signs of all values in X.distTo (X.edgeTo is already correct)</li>
</ul>
</li>
</ul>
<h2 id="reduction-170-preview">Reduction (170 Preview)</h2>
<h3 id="dag-longest-paths-and-reduction">DAG Longest Paths and Reduction</h3>
<ul>
<li>The problem solving we just used probably felt a little different than usual
<ul>
<li>Given a graph G, we created a new graph G' and fed it to a related (but different) algorithm, and then interpreted the result</li>
</ul>
</li>
<li>This process is known as reduction
<ul>
<li>Since DAG-SPT can be used to solve DAG-LPT, we say that &quot;DAG-LPT reduces to DAG-SPT&quot;</li>
</ul>
</li>
</ul>
<h3 id="reduction-analogy">Reduction Analogy</h3>
<ul>
<li>As a real-world analog, suppose we want to climb a hill. There are many ways to do this:
<ul>
<li>&quot;Climbing a hill&quot; reduces to &quot;riding a ski lift&quot;</li>
</ul>
</li>
</ul>
<h3 id="reduction-definition-informal">Reduction Definition (Informal)</h3>
<ul>
<li>&quot;If any subroutine for task Q can be used to solve P, we say P reduces to Q&quot;</li>
<li>Can also define the idea formally, but beyond scope of class</li>
</ul>
<h3 id="reduction-is-more-than-sign-flipping">Reduction is More than Sign Flipping</h3>
<ul>
<li>Let's see a richer example</li>
</ul>
<h3 id="the-independent-set-problem">The Independent Set Problem</h3>
<ul>
<li>An independent set is a set of vertices in which no two vertices are adjacent</li>
<li>The Independent-set Problem:
<ul>
<li>Does there exist an independent set of size k?</li>
<li>i.e. color k vertices red, such that none touch</li>
</ul>
</li>
</ul>
<h3 id="the-3sat-problem">THe 3SAT Problem</h3>
<ul>
<li>3SAT: Given a boolean formula, does there exist a truth value for boolean variables that obeys a set of 3-variable disjunctive constraints?
<ul>
<li>Example: (x1 || x2 || !x3) &amp;&amp; (x1 || !x1 || x1) &amp;&amp; (x2 || x3 || x4)</li>
<li>Solution: x1 = true, x2 = true, x3 = true, x4 = false</li>
</ul>
</li>
</ul>
<h3 id="3sat-reduces-to-independent-set">3SAT Reduces to Independent Set</h3>
<ul>
<li>Proposition: 3SAT Reduces to Independent Set</li>
<li>Proof: Given an instance A of 3-SAT, create an instance G of Independent-set
<ul>
<li>For each clause in A, create 3 vertices in a triangle</li>
<li>Add an edge between each literal and its negation (can't both be true in 3SAT means can't be in same set in Independent-set)</li>
</ul>
</li>
</ul>
<h3 id="reduction">Reduction</h3>
<ul>
<li>Since IND-SET can be used to solve 3SAT, we say that &quot;3SAT reduces to IND-SET&quot;
<ul>
<li>Note: 3SAT is not a graph problem!</li>
<li>Note: Reductions don't always involve creating graphs</li>
</ul>
</li>
</ul>
<h3 id="reductions-and-decomposition">Reductions and Decomposition</h3>
<ul>
<li>Arguably, we've been doing something like reduction all throughout the course
<ul>
<li>Abstract lists reduce to arrays</li>
<li>Percolation problem reduces to DisjointSets</li>
</ul>
</li>
<li>These examples aren't reductions exactly
<ul>
<li>We aren't just calling a subroutine</li>
<li>A better term would be decomposition: Taking a complex task and breaking it into smaller parts. This is the heart of computer science
<ul>
<li>Using appropriate abstractions makes problem solving vastly easier</li>
</ul>
</li>
</ul>
</li>
</ul>

</body>
</html>
