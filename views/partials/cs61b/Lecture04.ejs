<!DOCTYPE html>
<html>
<head>
<title>Lecture04.md</title>
<meta http-equiv="Content-type" content="text/html;charset=UTF-8">

<style>
/* https://github.com/microsoft/vscode/blob/master/extensions/markdown-language-features/media/markdown.css */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

body {
	font-family: var(--vscode-markdown-font-family, -apple-system, BlinkMacSystemFont, "Segoe WPC", "Segoe UI", "Ubuntu", "Droid Sans", sans-serif);
	font-size: var(--vscode-markdown-font-size, 14px);
	padding: 0 26px;
	line-height: var(--vscode-markdown-line-height, 22px);
	word-wrap: break-word;
}

#code-csp-warning {
	position: fixed;
	top: 0;
	right: 0;
	color: white;
	margin: 16px;
	text-align: center;
	font-size: 12px;
	font-family: sans-serif;
	background-color:#444444;
	cursor: pointer;
	padding: 6px;
	box-shadow: 1px 1px 1px rgba(0,0,0,.25);
}

#code-csp-warning:hover {
	text-decoration: none;
	background-color:#007acc;
	box-shadow: 2px 2px 2px rgba(0,0,0,.25);
}

body.scrollBeyondLastLine {
	margin-bottom: calc(100vh - 22px);
}

body.showEditorSelection .code-line {
	position: relative;
}

body.showEditorSelection .code-active-line:before,
body.showEditorSelection .code-line:hover:before {
	content: "";
	display: block;
	position: absolute;
	top: 0;
	left: -12px;
	height: 100%;
}

body.showEditorSelection li.code-active-line:before,
body.showEditorSelection li.code-line:hover:before {
	left: -30px;
}

.vscode-light.showEditorSelection .code-active-line:before {
	border-left: 3px solid rgba(0, 0, 0, 0.15);
}

.vscode-light.showEditorSelection .code-line:hover:before {
	border-left: 3px solid rgba(0, 0, 0, 0.40);
}

.vscode-light.showEditorSelection .code-line .code-line:hover:before {
	border-left: none;
}

.vscode-dark.showEditorSelection .code-active-line:before {
	border-left: 3px solid rgba(255, 255, 255, 0.4);
}

.vscode-dark.showEditorSelection .code-line:hover:before {
	border-left: 3px solid rgba(255, 255, 255, 0.60);
}

.vscode-dark.showEditorSelection .code-line .code-line:hover:before {
	border-left: none;
}

.vscode-high-contrast.showEditorSelection .code-active-line:before {
	border-left: 3px solid rgba(255, 160, 0, 0.7);
}

.vscode-high-contrast.showEditorSelection .code-line:hover:before {
	border-left: 3px solid rgba(255, 160, 0, 1);
}

.vscode-high-contrast.showEditorSelection .code-line .code-line:hover:before {
	border-left: none;
}

img {
	max-width: 100%;
	max-height: 100%;
}

a {
	text-decoration: none;
}

a:hover {
	text-decoration: underline;
}

a:focus,
input:focus,
select:focus,
textarea:focus {
	outline: 1px solid -webkit-focus-ring-color;
	outline-offset: -1px;
}

hr {
	border: 0;
	height: 2px;
	border-bottom: 2px solid;
}

h1 {
	padding-bottom: 0.3em;
	line-height: 1.2;
	border-bottom-width: 1px;
	border-bottom-style: solid;
}

h1, h2, h3 {
	font-weight: normal;
}

table {
	border-collapse: collapse;
}

table > thead > tr > th {
	text-align: left;
	border-bottom: 1px solid;
}

table > thead > tr > th,
table > thead > tr > td,
table > tbody > tr > th,
table > tbody > tr > td {
	padding: 5px 10px;
}

table > tbody > tr + tr > td {
	border-top: 1px solid;
}

blockquote {
	margin: 0 7px 0 5px;
	padding: 0 16px 0 10px;
	border-left-width: 5px;
	border-left-style: solid;
}

code {
	font-family: Menlo, Monaco, Consolas, "Droid Sans Mono", "Courier New", monospace, "Droid Sans Fallback";
	font-size: 1em;
	line-height: 1.357em;
}

body.wordWrap pre {
	white-space: pre-wrap;
}

pre:not(.hljs),
pre.hljs code > div {
	padding: 16px;
	border-radius: 3px;
	overflow: auto;
}

pre code {
	color: var(--vscode-editor-foreground);
	tab-size: 4;
}

/** Theming */

.vscode-light pre {
	background-color: rgba(220, 220, 220, 0.4);
}

.vscode-dark pre {
	background-color: rgba(10, 10, 10, 0.4);
}

.vscode-high-contrast pre {
	background-color: rgb(0, 0, 0);
}

.vscode-high-contrast h1 {
	border-color: rgb(0, 0, 0);
}

.vscode-light table > thead > tr > th {
	border-color: rgba(0, 0, 0, 0.69);
}

.vscode-dark table > thead > tr > th {
	border-color: rgba(255, 255, 255, 0.69);
}

.vscode-light h1,
.vscode-light hr,
.vscode-light table > tbody > tr + tr > td {
	border-color: rgba(0, 0, 0, 0.18);
}

.vscode-dark h1,
.vscode-dark hr,
.vscode-dark table > tbody > tr + tr > td {
	border-color: rgba(255, 255, 255, 0.18);
}

</style>

<style>
/* Tomorrow Theme */
/* http://jmblog.github.com/color-themes-for-google-code-highlightjs */
/* Original theme - https://github.com/chriskempson/tomorrow-theme */

/* Tomorrow Comment */
.hljs-comment,
.hljs-quote {
	color: #8e908c;
}

/* Tomorrow Red */
.hljs-variable,
.hljs-template-variable,
.hljs-tag,
.hljs-name,
.hljs-selector-id,
.hljs-selector-class,
.hljs-regexp,
.hljs-deletion {
	color: #c82829;
}

/* Tomorrow Orange */
.hljs-number,
.hljs-built_in,
.hljs-builtin-name,
.hljs-literal,
.hljs-type,
.hljs-params,
.hljs-meta,
.hljs-link {
	color: #f5871f;
}

/* Tomorrow Yellow */
.hljs-attribute {
	color: #eab700;
}

/* Tomorrow Green */
.hljs-string,
.hljs-symbol,
.hljs-bullet,
.hljs-addition {
	color: #718c00;
}

/* Tomorrow Blue */
.hljs-title,
.hljs-section {
	color: #4271ae;
}

/* Tomorrow Purple */
.hljs-keyword,
.hljs-selector-tag {
	color: #8959a8;
}

.hljs {
	display: block;
	overflow-x: auto;
	color: #4d4d4c;
	padding: 0.5em;
}

.hljs-emphasis {
	font-style: italic;
}

.hljs-strong {
	font-weight: bold;
}
</style>

<style>
/*
 * Markdown PDF CSS
 */

 body {
	font-family: -apple-system, BlinkMacSystemFont, "Segoe WPC", "Segoe UI", "Ubuntu", "Droid Sans", sans-serif, "Meiryo";
	padding: 0 12px;
}

pre {
	background-color: #f8f8f8;
	border: 1px solid #cccccc;
	border-radius: 3px;
	overflow-x: auto;
	white-space: pre-wrap;
	overflow-wrap: break-word;
}

pre:not(.hljs) {
	padding: 23px;
	line-height: 19px;
}

blockquote {
	background: rgba(127, 127, 127, 0.1);
	border-color: rgba(0, 122, 204, 0.5);
}

.emoji {
	height: 1.4em;
}

code {
	font-size: 14px;
	line-height: 19px;
}

/* for inline code */
:not(pre):not(.hljs) > code {
	color: #C9AE75; /* Change the old color so it seems less like an error */
	font-size: inherit;
}

/* Page Break : use <div class="page"/> to insert page break
-------------------------------------------------------- */
.page {
	page-break-after: always;
}

</style>

<script src="https://unpkg.com/mermaid/dist/mermaid.min.js"></script>
</head>
<body>
  <script>
    mermaid.initialize({
      startOnLoad: true,
      theme: document.body.classList.contains('vscode-dark') || document.body.classList.contains('vscode-high-contrast')
          ? 'dark'
          : 'default'
    });
  </script>
<h1 id="lecture-4-sllists-nested-classes-sentinel-nodes">Lecture 4: SLLists, Nested Classes, Sentinel Nodes</h1>
<h4 id="922020">9/2/2020</h4>
<pre class="hljs"><code><div>public class IntList {
    public int first;
    public IntList rest;

    public IntList(int f, IntList r) {
        first = f;
        rest = r;
    }
}
</div></code></pre>
<ul>
<li>While functional, &quot;naked&quot; linked lists like the one above are hard to use
<ul>
<li>Users of this class are probably going to need to know references very well, and be able to think recursively. Let's make our users' lives easier</li>
</ul>
</li>
</ul>
<h3 id="improvement-1-rebranding-and-culling">Improvement #1: Rebranding and Culling</h3>
<pre class="hljs"><code><div>public class IntNode {
    public int item;
    public IntNode next;

    public IntNode(int i, IntNode n) {
        item = i;
        next = n;
    }
}
</div></code></pre>
<h3 id="improvement-2-bureaucracy">Improvement #2: Bureaucracy</h3>
<pre class="hljs"><code><div>public class IntNode {
    public int item;
    public IntNode next;

    public IntNode(int i, IntNode n) {
        item = i;
        next = n;
    }
}

// An SLList is a list of integers, which hides the terrible truth of the nakedness within
public class SLList {
    public IntNode first;

    public SLList(int x) {
        first = new IntNode(x, null);
    }

    // Adds x to the front of the list
    public void addFirst(int x) {
        first = new IntNode(x, first);
    }

    // Returns the first item in the list
    public int getFirst() {
        return first.item;
    }

    public static void main(String[] args) {
        // Creates a list of one integer, namely 10
        SLList L = new SLList(10);
        L.addFirst(10); // Adds 10 to front of list
        L.addFirst(5); // Adds 5 to front of list
        int x = L.getFirst();
    }
}
</div></code></pre>
<ul>
<li>SLList is easier to instantiate (no need to specify <code>null</code>)</li>
</ul>
<h3 id="the-basic-sllist-and-helper-intnode-class">The Basic SLList and Helper IntNode Class</h3>
<ul>
<li>While functional, &quot;naked&quot; linked lists like the IntList class are hard to use
<ul>
<li>Users of <code>IntList</code> need to know Java references well, and be able to think recursively</li>
<li><code>SLList</code> is much simpler to use</li>
</ul>
</li>
</ul>
<h3 id="a-potential-sllist-danger">A Potential SLList Danger</h3>
<pre class="hljs"><code><div>SLList L = new SLList(15);
L.addFirst(10);
L.first.next.next = L.first.next;
</div></code></pre>
<pre class="hljs"><code><div>public class SLList {
    private IntNode first;

    public SLList(int x) {
        first = new IntNode(x, null);
    }

    // Adds x to the front of the list
    public void addFirst(int x) {
        first = new IntNode(x, first);
    }

    // Returns the first item in the list
    public int getFirst() {
        return first.item;
    }

    public static void main(String[] args) {
        // Creates a list of one integer, namely 10
        SLList L = new SLList(10);
        L.addFirst(10); // Adds 10 to front of list
        L.addFirst(5); // Adds 5 to front of list
        int x = L.getFirst();
    }
}
</div></code></pre>
<ul>
<li>Use the <code>private</code> keyword to prevent code in other classes from using members (or constructors) of a class</li>
</ul>
<h3 id="why-restrict-access">Why Restrict Access?</h3>
<ul>
<li>Hide implementation details from users of your class
<ul>
<li>Less for user of class to understand</li>
<li>Safe for you to change private methods (implementation)</li>
</ul>
</li>
<li>Despite the term 'access control':
<ul>
<li>Nothing to do with protection against hackers, spies, or other evil entities</li>
</ul>
</li>
</ul>
<h3 id="improvement-4-nesting-a-class">Improvement #4: Nesting a Class</h3>
<pre class="hljs"><code><div>public class SLList {

    private static class IntNode { // static: never looks outwards
        public int item;
        public IntNode next;

        public IntNode(int i, IntNode n) {
            item = i;
            next = n;
        }
    }

    private IntNode first;

    public SLList(int x) {
        first = new IntNode(x, null);
    }

    // Adds x to the front of the list
    public void addFirst(int x) {
        first = new IntNode(x, first);
    }

    // Returns the first item in the list
    public int getFirst() {
        return first.item;
    }

    public static void main(String[] args) {
        // Creates a list of one integer, namely 10
        SLList L = new SLList(10);
        L.addFirst(10); // Adds 10 to front of list
        L.addFirst(5); // Adds 5 to front of list
        int x = L.getFirst();
    }
}
</div></code></pre>
<ul>
<li>Could have made <code>IntNode</code> private if we wanted to</li>
</ul>
<h3 id="why-nested-classes">Why Nested Classes?</h3>
<ul>
<li>Nested Classes are useful when a class doesn't stand on its own and is obviously subordinate to other classes
<ul>
<li>Make the nested class private if other classes should never use the nested class</li>
</ul>
</li>
</ul>
<h3 id="static-nested-classes">Static Nested Classes</h3>
<ul>
<li>If the nested class never uses any instance variables or methods of the outside class, declare it static
<ul>
<li>Static classes cannot access outer class's instance variables or methods</li>
<li>Results in a minor savings of memory</li>
</ul>
</li>
</ul>
<h3 id="adding-more-sllist-functionality">Adding More SLList Functionality</h3>
<ul>
<li>To motivate our remaining improvements, ad to give more functionality to our SLList class, let's add:
<ul>
<li><code>.addLast(int x)</code></li>
<li><code>.size()</code></li>
</ul>
</li>
</ul>
<pre class="hljs"><code><div>public class SLList {

    private static class IntNode { // static: never looks outwards
        public int item;
        public IntNode next;

        public IntNode(int i, IntNode n) {
            item = i;
            next = n;
        }
    }

    private IntNode first;

    public SLList(int x) {
        first = new IntNode(x, null);
    }

    // Adds x to the front of the list
    public void addFirst(int x) {
        first = new IntNode(x, first);
    }

    // Returns the first item in the list
    public int getFirst() {
        return first.item;
    }

    // Adds an item to the end of the list
    public void addLast(int x) {
        IntNode p = first;
        while (p.next != null) {
            p = p.next;
        }
        p.next = new IntNode(x, null);
    }

    // Returns the size of the list that starts at IntNode p
    private static int size(IntNode p) {
        if (p.next == null) {
            return 1;
        }
        return 1 + size(p.next);
    }

    public int size() {
        return size(first);
    }

    public static void main(String[] args) {
        // Creates a list of one integer, namely 10
        SLList L = new SLList(10);
        L.addFirst(10); // Adds 10 to front of list
        L.addFirst(5); // Adds 5 to front of list
        L.addLast(20);
        System.out.println(L.size())
    }
}
</div></code></pre>
<h3 id="efficiency-of-size">Efficiency of Size</h3>
<ul>
<li>How efficient is size?
<ul>
<li>Suppose size takes 2 seconds on a list of size 1000</li>
<li>How long will it take on a list of size 1000000?
<ul>
<li>2000 seconds!</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="improvement-5-fast-size">Improvement #5: Fast size()</h3>
<ul>
<li>Your goal:
<ul>
<li>Modify SLList so that the execution time of size() is always fast (i.e. independent of the size of the list)</li>
</ul>
</li>
</ul>
<pre class="hljs"><code><div>public class SLList {

    private static class IntNode { // static: never looks outwards
        public int item;
        public IntNode next;

        public IntNode(int i, IntNode n) {
            item = i;
            next = n;
        }
    }

    private IntNode first;
    private int size;

    public SLList(int x) {
        first = new IntNode(x, null);
        size = 1;
    }

    // Adds x to the front of the list
    public void addFirst(int x) {
        first = new IntNode(x, first);
        size += 1;
    }

    // Returns the first item in the list
    public int getFirst() {
        return first.item;
    }

    // Adds an item to the end of the list
    public void addLast(int x) {
        size += 1;
        IntNode p = first;
        while (p.next != null) {
            p = p.next;
        }
        p.next = new IntNode(x, null);
    }

    public int size() {
        return size;
    }

    public static void main(String[] args) {
        // Creates a list of one integer, namely 10
        SLList L = new SLList(10);
        L.addFirst(10); // Adds 10 to front of list
        L.addFirst(5); // Adds 5 to front of list
        L.addLast(20);
        System.out.println(L.size())
    }
}
</div></code></pre>
<ul>
<li>Solution: Maintain a special size variable that caches the size of the list
<ul>
<li>Caching: putting aside data to speed up retrieval</li>
</ul>
</li>
<li>TANSTAAFL: There ain't no such thing as a free lunch
<ul>
<li>But spreading the work over each add call is a net win in almost any case</li>
</ul>
</li>
<li>The SLList class allows us to store meta information about the entire list, e.g. <code>size</code></li>
</ul>
<h3 id="improvement-6a-representing-the-empty-list">Improvement #6a: Representing the Empty List</h3>
<pre class="hljs"><code><div>public class SLList {

    private static class IntNode { // static: never looks outwards
        public int item;
        public IntNode next;

        public IntNode(int i, IntNode n) {
            item = i;
            next = n;
        }
    }

    private IntNode first;
    private int size;

    // Creates an empty SLList
    public SLList() {
        first = null;
        size = 0;
    }

    public SLList(int x) {
        first = new IntNode(x, null);
        size = 1;
    }

    // Adds x to the front of the list
    public void addFirst(int x) {
        first = new IntNode(x, first);
        size += 1;
    }

    // Returns the first item in the list
    public int getFirst() {
        return first.item;
    }

    // Adds an item to the end of the list
    public void addLast(int x) {
        size = size + 1;

        if (first == null) {
            first = new IntNode(x, null);
            return;
        }

        IntNode p = first;
        while (p.next != null) {
            p = p.next;
        }
        p.next = new IntNode(x, null);
    }

    public int size() {
        return size;
    }

    public static void main(String[] args) {
        // Creates a list of one integer, namely 10
        SLList L = new SLList();
        L.addFirst(10); // Adds 10 to front of list
        L.addFirst(5); // Adds 5 to front of list
        L.addLast(20);
        System.out.println(L.size())
    }
}
</div></code></pre>
<h3 id="tip-for-being-a-good-programmer-keep-code-simple">Tip for Being a GOod Programmer: Keep Code Simple</h3>
<ul>
<li>As a human programmer, you only have so much working memory
<ul>
<li>You want to restrict the amount of complexity in your life!</li>
<li>Simple code is (usually) good code
<ul>
<li>Special cases are not &quot;simple&quot;</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="addlasts-fundamental-problem">addLast's Fundamental Problem</h3>
<ul>
<li>The fundamental problem:
<ul>
<li>The empty list has a null <code>first</code>, can't access <code>first.next</code></li>
</ul>
</li>
<li>Our fix is a bit ugly:
<ul>
<li>Requires a special case</li>
<li>More complex data structures will have many more special cases</li>
</ul>
</li>
<li>How can we avoid special cases?
<ul>
<li>Make all <code>SLLists</code> (even empty) the &quot;same&quot;</li>
</ul>
</li>
</ul>
<h3 id="improvement-6b-representing-the-empty-list-use-a-sentinel-node">Improvement #6b: Representing the Empty List Use a Sentinel Node</h3>
<ul>
<li>Create a special node that is always there! Let's call it a &quot;sentinel node&quot;</li>
<li>The empty list is just the sentinel node</li>
<li>A list with 3 numbers has a sentinel node and 3 nodes that contain real data</li>
<li>Let's try reimplementing SLList with a sentinel node</li>
</ul>
<pre class="hljs"><code><div>public class SLList {

    private static class IntNode { // static: never looks outwards
        public int item;
        public IntNode next;

        public IntNode(int i, IntNode n) {
            item = i;
            next = n;
        }
    }

    // The first item (if it exists) is at sentinel.next
    private IntNode sentinel;
    private int size;

    // Creates an empty SLList
    public SLList() {
        sentinel = new IntNode(69, null);
        size = 0;
    }

    public SLList(int x) {
        sentinel = new IntNode(69, null);
        sentinel.next = new IntNode(x, null);
        size = 1;
    }

    // Adds x to the front of the list
    public void addFirst(int x) {
        sentinel.next = new IntNode(x, sentinel.next);
        size = size + 1;
    }

    // Returns the first item in the list
    public int getFirst() {
        return sentinel.next.item;
    }

    // Adds an item to the end of the list
    public void addLast(int x) {
        size = size + 1;

        IntNode p = sentinel;
        while (p.next != null) {
            p = p.next;
        }
        p.next = new IntNode(x, null);
    }

    public int size() {
        return size;
    }

    public static void main(String[] args) {
        // Creates a list of one integer, namely 10
        SLList L = new SLList();
        L.addFirst(10); // Adds 10 to front of list
        L.addFirst(5); // Adds 5 to front of list
        L.addLast(20);
        System.out.println(L.size())
    }
}
</div></code></pre>
<h3 id="sentinel-node">Sentinel Node</h3>
<ul>
<li>The sentinel node is always there for you</li>
<li>Notes:
<ul>
<li>I've renamed <code>first</code> to be <code>sentinel</code></li>
<li><code>sentinel</code> is never null, always points to sentinel node</li>
<li>Sentinel node's <code>item</code> needs to be some integer, but doesn't matter what value we pick</li>
<li>Had to fix constructors and methods to be compatible with sentinel nodes</li>
</ul>
</li>
</ul>
<h3 id="addlast-with-sentinel-node">addLast (with Sentinel Node)</h3>
<ul>
<li>Bottom line: Having a sentinel simplifies our <code>addLast</code> method
<ul>
<li>No need for a special case to check if <code>sentinel</code> is null</li>
</ul>
</li>
</ul>
<h3 id="invariants">Invariants</h3>
<ul>
<li>An invariant is a condition that is guaranteed to be true during code execution (assuming there are no bugs in your code)</li>
<li>An <code>SLList</code> with a sentinel node has at least the following invariants
<ul>
<li>The <code>sentinel</code> reference always points to a sentinel node</li>
<li>The first node is always at <code>sentinel.next</code></li>
<li>The <code>size</code> variable is always the total number of items that have been added</li>
</ul>
</li>
<li>Invariants make it easier to reason about code
<ul>
<li>Can assume they are true to simplify code (e.g. addLast doesn't need to worry about nulls)</li>
<li>Must ensure that methods preserve invariants</li>
</ul>
</li>
</ul>

</body>
</html>
